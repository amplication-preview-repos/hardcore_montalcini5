/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsDate,
  MaxLength,
  IsOptional,
  IsEnum,
  ValidateNested,
} from "class-validator";
import { Type } from "class-transformer";
import { EnumBugSeverity } from "./EnumBugSeverity";
import { EnumBugStatus } from "./EnumBugStatus";
import { Repository } from "../../repository/base/Repository";

@ObjectType()
class Bug {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  title!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description!: string | null;

  @ApiProperty({
    required: false,
    enum: EnumBugSeverity,
  })
  @IsEnum(EnumBugSeverity)
  @IsOptional()
  @Field(() => EnumBugSeverity, {
    nullable: true,
  })
  severity?: "Option1" | null;

  @ApiProperty({
    required: false,
    enum: EnumBugStatus,
  })
  @IsEnum(EnumBugStatus)
  @IsOptional()
  @Field(() => EnumBugStatus, {
    nullable: true,
  })
  status?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: () => Repository,
  })
  @ValidateNested()
  @Type(() => Repository)
  @IsOptional()
  repository?: Repository | null;
}

export { Bug as Bug };
