/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Bug as PrismaBug,
  Repository as PrismaRepository,
} from "@prisma/client";

export class BugServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BugCountArgs, "select">): Promise<number> {
    return this.prisma.bug.count(args);
  }

  async bugs(args: Prisma.BugFindManyArgs): Promise<PrismaBug[]> {
    return this.prisma.bug.findMany(args);
  }
  async bug(args: Prisma.BugFindUniqueArgs): Promise<PrismaBug | null> {
    return this.prisma.bug.findUnique(args);
  }
  async createBug(args: Prisma.BugCreateArgs): Promise<PrismaBug> {
    return this.prisma.bug.create(args);
  }
  async updateBug(args: Prisma.BugUpdateArgs): Promise<PrismaBug> {
    return this.prisma.bug.update(args);
  }
  async deleteBug(args: Prisma.BugDeleteArgs): Promise<PrismaBug> {
    return this.prisma.bug.delete(args);
  }

  async getRepository(parentId: string): Promise<PrismaRepository | null> {
    return this.prisma.bug
      .findUnique({
        where: { id: parentId },
      })
      .repository();
  }
}
