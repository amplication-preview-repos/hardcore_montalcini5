/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Bug } from "./Bug";
import { BugCountArgs } from "./BugCountArgs";
import { BugFindManyArgs } from "./BugFindManyArgs";
import { BugFindUniqueArgs } from "./BugFindUniqueArgs";
import { CreateBugArgs } from "./CreateBugArgs";
import { UpdateBugArgs } from "./UpdateBugArgs";
import { DeleteBugArgs } from "./DeleteBugArgs";
import { Repository } from "../../repository/base/Repository";
import { BugService } from "../bug.service";
@graphql.Resolver(() => Bug)
export class BugResolverBase {
  constructor(protected readonly service: BugService) {}

  async _bugsMeta(
    @graphql.Args() args: BugCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Bug])
  async bugs(@graphql.Args() args: BugFindManyArgs): Promise<Bug[]> {
    return this.service.bugs(args);
  }

  @graphql.Query(() => Bug, { nullable: true })
  async bug(@graphql.Args() args: BugFindUniqueArgs): Promise<Bug | null> {
    const result = await this.service.bug(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Bug)
  async createBug(@graphql.Args() args: CreateBugArgs): Promise<Bug> {
    return await this.service.createBug({
      ...args,
      data: {
        ...args.data,

        repository: args.data.repository
          ? {
              connect: args.data.repository,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Bug)
  async updateBug(@graphql.Args() args: UpdateBugArgs): Promise<Bug | null> {
    try {
      return await this.service.updateBug({
        ...args,
        data: {
          ...args.data,

          repository: args.data.repository
            ? {
                connect: args.data.repository,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Bug)
  async deleteBug(@graphql.Args() args: DeleteBugArgs): Promise<Bug | null> {
    try {
      return await this.service.deleteBug(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Repository, {
    nullable: true,
    name: "repository",
  })
  async getRepository(
    @graphql.Parent() parent: Bug
  ): Promise<Repository | null> {
    const result = await this.service.getRepository(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
