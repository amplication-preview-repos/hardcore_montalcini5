/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RepositoryService } from "../repository.service";
import { RepositoryCreateInput } from "./RepositoryCreateInput";
import { Repository } from "./Repository";
import { RepositoryFindManyArgs } from "./RepositoryFindManyArgs";
import { RepositoryWhereUniqueInput } from "./RepositoryWhereUniqueInput";
import { RepositoryUpdateInput } from "./RepositoryUpdateInput";
import { BugFindManyArgs } from "../../bug/base/BugFindManyArgs";
import { Bug } from "../../bug/base/Bug";
import { BugWhereUniqueInput } from "../../bug/base/BugWhereUniqueInput";
import { FileFindManyArgs } from "../../file/base/FileFindManyArgs";
import { File } from "../../file/base/File";
import { FileWhereUniqueInput } from "../../file/base/FileWhereUniqueInput";
import { WikiFindManyArgs } from "../../wiki/base/WikiFindManyArgs";
import { Wiki } from "../../wiki/base/Wiki";
import { WikiWhereUniqueInput } from "../../wiki/base/WikiWhereUniqueInput";

export class RepositoryControllerBase {
  constructor(protected readonly service: RepositoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Repository })
  async createRepository(
    @common.Body() data: RepositoryCreateInput
  ): Promise<Repository> {
    return await this.service.createRepository({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Repository] })
  @ApiNestedQuery(RepositoryFindManyArgs)
  async repositories(@common.Req() request: Request): Promise<Repository[]> {
    const args = plainToClass(RepositoryFindManyArgs, request.query);
    return this.service.repositories({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Repository })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async repository(
    @common.Param() params: RepositoryWhereUniqueInput
  ): Promise<Repository | null> {
    const result = await this.service.repository({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        description: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Repository })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRepository(
    @common.Param() params: RepositoryWhereUniqueInput,
    @common.Body() data: RepositoryUpdateInput
  ): Promise<Repository | null> {
    try {
      return await this.service.updateRepository({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Repository })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRepository(
    @common.Param() params: RepositoryWhereUniqueInput
  ): Promise<Repository | null> {
    try {
      return await this.service.deleteRepository({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          description: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/bugs")
  @ApiNestedQuery(BugFindManyArgs)
  async findBugs(
    @common.Req() request: Request,
    @common.Param() params: RepositoryWhereUniqueInput
  ): Promise<Bug[]> {
    const query = plainToClass(BugFindManyArgs, request.query);
    const results = await this.service.findBugs(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        title: true,
        description: true,
        severity: true,
        status: true,

        repository: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bugs")
  async connectBugs(
    @common.Param() params: RepositoryWhereUniqueInput,
    @common.Body() body: BugWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bugs: {
        connect: body,
      },
    };
    await this.service.updateRepository({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bugs")
  async updateBugs(
    @common.Param() params: RepositoryWhereUniqueInput,
    @common.Body() body: BugWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bugs: {
        set: body,
      },
    };
    await this.service.updateRepository({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bugs")
  async disconnectBugs(
    @common.Param() params: RepositoryWhereUniqueInput,
    @common.Body() body: BugWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bugs: {
        disconnect: body,
      },
    };
    await this.service.updateRepository({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/files")
  @ApiNestedQuery(FileFindManyArgs)
  async findFiles(
    @common.Req() request: Request,
    @common.Param() params: RepositoryWhereUniqueInput
  ): Promise<File[]> {
    const query = plainToClass(FileFindManyArgs, request.query);
    const results = await this.service.findFiles(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        fileName: true,
        fileContent: true,

        repository: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/files")
  async connectFiles(
    @common.Param() params: RepositoryWhereUniqueInput,
    @common.Body() body: FileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      files: {
        connect: body,
      },
    };
    await this.service.updateRepository({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/files")
  async updateFiles(
    @common.Param() params: RepositoryWhereUniqueInput,
    @common.Body() body: FileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      files: {
        set: body,
      },
    };
    await this.service.updateRepository({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/files")
  async disconnectFiles(
    @common.Param() params: RepositoryWhereUniqueInput,
    @common.Body() body: FileWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      files: {
        disconnect: body,
      },
    };
    await this.service.updateRepository({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/wikis")
  @ApiNestedQuery(WikiFindManyArgs)
  async findWikis(
    @common.Req() request: Request,
    @common.Param() params: RepositoryWhereUniqueInput
  ): Promise<Wiki[]> {
    const query = plainToClass(WikiFindManyArgs, request.query);
    const results = await this.service.findWikis(params.id, {
      ...query,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        content: true,

        repository: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/wikis")
  async connectWikis(
    @common.Param() params: RepositoryWhereUniqueInput,
    @common.Body() body: WikiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wikis: {
        connect: body,
      },
    };
    await this.service.updateRepository({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/wikis")
  async updateWikis(
    @common.Param() params: RepositoryWhereUniqueInput,
    @common.Body() body: WikiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wikis: {
        set: body,
      },
    };
    await this.service.updateRepository({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/wikis")
  async disconnectWikis(
    @common.Param() params: RepositoryWhereUniqueInput,
    @common.Body() body: WikiWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      wikis: {
        disconnect: body,
      },
    };
    await this.service.updateRepository({
      where: params,
      data,
      select: { id: true },
    });
  }
}
