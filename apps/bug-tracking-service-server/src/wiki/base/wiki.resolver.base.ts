/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Wiki } from "./Wiki";
import { WikiCountArgs } from "./WikiCountArgs";
import { WikiFindManyArgs } from "./WikiFindManyArgs";
import { WikiFindUniqueArgs } from "./WikiFindUniqueArgs";
import { CreateWikiArgs } from "./CreateWikiArgs";
import { UpdateWikiArgs } from "./UpdateWikiArgs";
import { DeleteWikiArgs } from "./DeleteWikiArgs";
import { Repository } from "../../repository/base/Repository";
import { WikiService } from "../wiki.service";
@graphql.Resolver(() => Wiki)
export class WikiResolverBase {
  constructor(protected readonly service: WikiService) {}

  async _wikisMeta(
    @graphql.Args() args: WikiCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Wiki])
  async wikis(@graphql.Args() args: WikiFindManyArgs): Promise<Wiki[]> {
    return this.service.wikis(args);
  }

  @graphql.Query(() => Wiki, { nullable: true })
  async wiki(@graphql.Args() args: WikiFindUniqueArgs): Promise<Wiki | null> {
    const result = await this.service.wiki(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Wiki)
  async createWiki(@graphql.Args() args: CreateWikiArgs): Promise<Wiki> {
    return await this.service.createWiki({
      ...args,
      data: {
        ...args.data,

        repository: args.data.repository
          ? {
              connect: args.data.repository,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Wiki)
  async updateWiki(@graphql.Args() args: UpdateWikiArgs): Promise<Wiki | null> {
    try {
      return await this.service.updateWiki({
        ...args,
        data: {
          ...args.data,

          repository: args.data.repository
            ? {
                connect: args.data.repository,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Wiki)
  async deleteWiki(@graphql.Args() args: DeleteWikiArgs): Promise<Wiki | null> {
    try {
      return await this.service.deleteWiki(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Repository, {
    nullable: true,
    name: "repository",
  })
  async getRepository(
    @graphql.Parent() parent: Wiki
  ): Promise<Repository | null> {
    const result = await this.service.getRepository(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
